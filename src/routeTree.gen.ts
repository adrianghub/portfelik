/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as AdminImport } from "./routes/admin";
import { Route as AdminrootImport } from "./routes/admin/__root";
import { Route as AdminCategoriesImport } from "./routes/admin/categories";
import { Route as AdminDashboardImport } from "./routes/admin/dashboard";
import { Route as AdminIndexImport } from "./routes/admin/index";
import { Route as CategoriesImport } from "./routes/categories";
import { Route as IndexImport } from "./routes/index";
import { Route as TransactionsImport } from "./routes/transactions";

// Create/Update Routes

const AdminrootRoute = AdminrootImport.update({
  id: "/__root",
  getParentRoute: () => AdminRoute,
} as any);

const TransactionsRoute = TransactionsImport.update({
  id: "/transactions",
  path: "/transactions",
  getParentRoute: () => rootRoute,
} as any);

const CategoriesRoute = CategoriesImport.update({
  id: "/categories",
  path: "/categories",
  getParentRoute: () => rootRoute,
} as any);

const AdminRoute = AdminImport.update({
  id: "/admin",
  path: "/admin",
  getParentRoute: () => rootRoute,
} as any);

const IndexRoute = IndexImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRoute,
} as any);

const AdminIndexRoute = AdminIndexImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => AdminRoute,
} as any);

const AdminDashboardRoute = AdminDashboardImport.update({
  id: "/dashboard",
  path: "/dashboard",
  getParentRoute: () => AdminRoute,
} as any);

const AdminCategoriesRoute = AdminCategoriesImport.update({
  id: "/categories",
  path: "/categories",
  getParentRoute: () => AdminRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/": {
      id: "/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof IndexImport;
      parentRoute: typeof rootRoute;
    };
    "/admin": {
      id: "/admin";
      path: "/admin";
      fullPath: "/admin";
      preLoaderRoute: typeof AdminImport;
      parentRoute: typeof rootRoute;
    };
    "/categories": {
      id: "/categories";
      path: "/categories";
      fullPath: "/categories";
      preLoaderRoute: typeof CategoriesImport;
      parentRoute: typeof rootRoute;
    };
    "/transactions": {
      id: "/transactions";
      path: "/transactions";
      fullPath: "/transactions";
      preLoaderRoute: typeof TransactionsImport;
      parentRoute: typeof rootRoute;
    };
    "/admin/__root": {
      id: "/admin/__root";
      path: "";
      fullPath: "/admin";
      preLoaderRoute: typeof AdminrootImport;
      parentRoute: typeof AdminImport;
    };
    "/admin/categories": {
      id: "/admin/categories";
      path: "/categories";
      fullPath: "/admin/categories";
      preLoaderRoute: typeof AdminCategoriesImport;
      parentRoute: typeof AdminImport;
    };
    "/admin/dashboard": {
      id: "/admin/dashboard";
      path: "/dashboard";
      fullPath: "/admin/dashboard";
      preLoaderRoute: typeof AdminDashboardImport;
      parentRoute: typeof AdminImport;
    };
    "/admin/": {
      id: "/admin/";
      path: "/";
      fullPath: "/admin/";
      preLoaderRoute: typeof AdminIndexImport;
      parentRoute: typeof AdminImport;
    };
  }
}

// Create and export the route tree

interface AdminRouteChildren {
  AdminrootRoute: typeof AdminrootRoute;
  AdminCategoriesRoute: typeof AdminCategoriesRoute;
  AdminDashboardRoute: typeof AdminDashboardRoute;
  AdminIndexRoute: typeof AdminIndexRoute;
}

const AdminRouteChildren: AdminRouteChildren = {
  AdminrootRoute: AdminrootRoute,
  AdminCategoriesRoute: AdminCategoriesRoute,
  AdminDashboardRoute: AdminDashboardRoute,
  AdminIndexRoute: AdminIndexRoute,
};

const AdminRouteWithChildren = AdminRoute._addFileChildren(AdminRouteChildren);

export interface FileRoutesByFullPath {
  "/": typeof IndexRoute;
  "/admin": typeof AdminrootRoute;
  "/categories": typeof CategoriesRoute;
  "/transactions": typeof TransactionsRoute;
  "/admin/categories": typeof AdminCategoriesRoute;
  "/admin/dashboard": typeof AdminDashboardRoute;
  "/admin/": typeof AdminIndexRoute;
}

export interface FileRoutesByTo {
  "/": typeof IndexRoute;
  "/categories": typeof CategoriesRoute;
  "/transactions": typeof TransactionsRoute;
  "/admin": typeof AdminIndexRoute;
  "/admin/categories": typeof AdminCategoriesRoute;
  "/admin/dashboard": typeof AdminDashboardRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  "/": typeof IndexRoute;
  "/admin": typeof AdminRouteWithChildren;
  "/categories": typeof CategoriesRoute;
  "/transactions": typeof TransactionsRoute;
  "/admin/__root": typeof AdminrootRoute;
  "/admin/categories": typeof AdminCategoriesRoute;
  "/admin/dashboard": typeof AdminDashboardRoute;
  "/admin/": typeof AdminIndexRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | "/"
    | "/admin"
    | "/categories"
    | "/transactions"
    | "/admin/categories"
    | "/admin/dashboard"
    | "/admin/";
  fileRoutesByTo: FileRoutesByTo;
  to:
    | "/"
    | "/categories"
    | "/transactions"
    | "/admin"
    | "/admin/categories"
    | "/admin/dashboard";
  id:
    | "__root__"
    | "/"
    | "/admin"
    | "/categories"
    | "/transactions"
    | "/admin/__root"
    | "/admin/categories"
    | "/admin/dashboard"
    | "/admin/";
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  AdminRoute: typeof AdminRouteWithChildren;
  CategoriesRoute: typeof CategoriesRoute;
  TransactionsRoute: typeof TransactionsRoute;
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminRoute: AdminRouteWithChildren,
  CategoriesRoute: CategoriesRoute,
  TransactionsRoute: TransactionsRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/admin",
        "/categories",
        "/transactions"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/admin": {
      "filePath": "admin.tsx",
      "children": [
        "/admin/__root",
        "/admin/categories",
        "/admin/dashboard",
        "/admin/"
      ]
    },
    "/categories": {
      "filePath": "categories.tsx"
    },
    "/transactions": {
      "filePath": "transactions.tsx"
    },
    "/admin/__root": {
      "filePath": "admin/__root.tsx",
      "parent": "/admin"
    },
    "/admin/categories": {
      "filePath": "admin/categories.tsx",
      "parent": "/admin"
    },
    "/admin/dashboard": {
      "filePath": "admin/dashboard.tsx",
      "parent": "/admin"
    },
    "/admin/": {
      "filePath": "admin/index.tsx",
      "parent": "/admin"
    }
  }
}
ROUTE_MANIFEST_END */
