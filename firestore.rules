rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Allow all operations when running in the emulator
    match /{document=**} {
      // For local development with emulators
      allow read, write: if request.auth == null;
    }

    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isAdmin() {
      return isAuthenticated() &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if isAdmin();
    }

    match /transactions/{transactionId} {
      allow read: if isAuthenticated() &&
        (request.auth.uid == resource.data.userId || isAdmin());
      allow create: if isAuthenticated() &&
        request.auth.uid == request.resource.data.userId;
      allow update, delete: if isAuthenticated() &&
        (request.auth.uid == resource.data.userId || isAdmin());
    }

    match /categories/{categoryId} {
      allow read: if isAuthenticated() &&
        (resource.data.isDefault == true ||
         request.auth.uid == resource.data.userId ||
         isAdmin());

      allow create: if isAuthenticated() &&
        ((request.resource.data.isDefault == true && isAdmin()) ||
         (request.resource.data.isDefault != true && request.auth.uid == request.resource.data.userId));

      allow update, delete: if isAuthenticated() &&
        ((resource.data.isDefault == true && isAdmin()) ||
         (resource.data.isDefault != true &&
          (request.auth.uid == resource.data.userId || isAdmin())));
    }
  }
}